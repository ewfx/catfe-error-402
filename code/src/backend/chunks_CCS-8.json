[
    {
        "ticket_key": "CCS-8",
        "application_name": "Fraud Detection",
        "url": "https://error-402.atlassian.net/browse/CCS-8",
        "text": "expand: renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations,customfield_10010.requestTypePractice\nkey: CCS-8\nstatuscategorychangedate: 2025-03-21T13:14:32.697+0530\nissuetype.description: Tasks track small, distinct pieces of work.\nissuetype.name: Task\nissuetype.subtask: False\nissuetype.avatarId: 10318\nproject.key: CCS\nproject.name: GenTestAI\nproject.projectTypeKey: software\nproject.simplified: True\nworkratio: -1\nwatches.watchCount: 1\nwatches.isWatching: False\nissuerestriction: True\nlastViewed: 2025-03-25T02:00:02.453+0530\ncreated: 2025-03-21T13:14:32.406+0530\npriority.name: Medium\nhasEpicLinkFieldDependency: False\nshowField: False\nnonEditableReason.reason: EPIC_LINK_SHOULD_BE_USED\nnonEditableReason.message: To set an epic as the parent, use the epic link instead\ncustomfield_10019: 0|i00013:\nassignee.emailAddress: patni.atishay02@gmail.com\nassignee.displayName: Atishay Patni\nupdated: 2025-03-25T02:10:54.843+0530\nstatus.name: To Do\nstatus.statusCategory.key: new\nstatus.statusCategory.colorName: blue-gray\nstatus.statusCategory.name: To Do\ndescription: To enhance the fraud detection mock API, we need to implement full CRUD (Create, Read, Update, Delete) operations for managing transactions in MongoDB. This will allow users to create new transactions, retrieve specific transactions, update existing ones, and delete them if needed.\n\n*\u270d\ufe0f Acceptance Criteria:*\n\u2705 *POST* {{/api/fraud-detection/}}- Create a new transaction and store it in MongoDB\n\u2705 *GET* {{/api/fraud-detection/{transaction_id}}}- Fetch a specific transaction by its *ObjectId*\n\u2705 *DELETE* {{/api/fraud-detection/{transaction_id}}} - Remove a transaction from MongoDB\n\u2705 Ensure *error handling* for invalid or missing transaction IDs\n\u2705 Responses should return *JSON format*\n\n*\ud83d\udee0\ufe0f Technical Details:*\n\n* *Backend:* FastAPI (Python)\n* *Database:* MongoDB\n* *ID Management:* Use *ObjectId* for unique transaction identification\n* *Data Validation:* Use *Pydantic* for request validation\n* *Error Handling:* Raise *HTTP 404* if a transaction is not found\nsummary: FD-102 Implement CRUD operations for managing transactions in the fraud detection mock API\ncreator.displayName: Pratham Bist\nreporter.displayName: Pratham Bist\naggregateprogress.progress: 0\naggregateprogress.total: 0\nprogress.progress: 0\nprogress.total: 0\nvotes.votes: 0\nvotes.hasVoted: False\ncomment.maxResults: 0\ncomment.total: 0\ncomment.startAt: 0\nworklog.startAt: 0\nworklog.maxResults: 20\nworklog.total: 0"
    }
]