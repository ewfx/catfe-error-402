{"uid":"5db79ad3a48bd866","name":"Get a transaction by ID with invalid data","fullName":"Fraud Detection API: Get a transaction by ID with invalid data","historyId":"74f9c4330bf584d8cb364dcfd4a78ef4","time":{"start":1742998421559,"stop":1742998421559,"duration":0},"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@given(u'a transaction does not exist with ID \"666\"')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Given a transaction does not exist with ID \"666\"')\n\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@given(u'a transaction does not exist with ID \"666\"')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Given a transaction does not exist with ID \"666\"')\n\n","steps":[{"name":"Given a transaction does not exist with ID \"666\"","time":{"start":1742998421559,"stop":1742998421559,"duration":0},"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@given(u'a transaction does not exist with ID \"666\"')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Given a transaction does not exist with ID \"666\"')\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"When I send a GET request to \"/api/fraud-detection/666\"","time":{"start":1742998421559,"stop":1742998421559,"duration":0},"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@when(u'I send a GET request to \"/api/fraud-detection/666\"')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: When I send a GET request to \"/api/fraud-detection/666\"')\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"Then the response status code should be 404","time":{"start":1742998421559,"stop":1742998421559,"duration":0},"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'the response status code should be 404')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then the response status code should be 404')\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"And the response should contain \"message\"","time":{"start":1742998421559,"stop":1742998421559,"duration":0},"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'the response should contain \"message\"')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then the response should contain \"message\"')\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":4,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Fraud Detection API"},{"name":"framework","value":"behave"},{"name":"language","value":"cpython3"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"5db79ad3a48bd866.json","parameterValues":[]}