{"uid":"5f7c302a67d1cc5e","name":"Create a transaction with invalid data","fullName":"Fraud Detection API: Create a transaction with invalid data","historyId":"a998ca7f839460b85a0cc542a7f917fe","time":{"start":1743000451551,"stop":1743000451572,"duration":21},"status":"failed","statusMessage":"AssertionError: Expected message 'Invalid transaction data', but got 'Transaction ID '555' already exists'\n","statusTrace":"  File \"/Users/apatni/error-402/Vembed/lib/python3.13/site-packages/behave/model.py\", line 1329, in run\n    match.run(runner.context)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^\n  File \"/Users/apatni/error-402/Vembed/lib/python3.13/site-packages/behave/matchers.py\", line 98, in run\n    self.func(context, *args, **kwargs)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"bdd/Fraud Detection/features/steps/Fraud Detection_steps.py\", line 39, in step_impl\n    assert response_json[\"message\"] == \"Invalid transaction data\", f\"Expected message 'Invalid transaction data', but got '{response_json['message']}'\"\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected message 'Invalid transaction data', but got 'Transaction ID '555' already exists'\n","statusTrace":"  File \"/Users/apatni/error-402/Vembed/lib/python3.13/site-packages/behave/model.py\", line 1329, in run\n    match.run(runner.context)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^\n  File \"/Users/apatni/error-402/Vembed/lib/python3.13/site-packages/behave/matchers.py\", line 98, in run\n    self.func(context, *args, **kwargs)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"bdd/Fraud Detection/features/steps/Fraud Detection_steps.py\", line 39, in step_impl\n    assert response_json[\"message\"] == \"Invalid transaction data\", f\"Expected message 'Invalid transaction data', but got '{response_json['message']}'\"\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Given a transaction with","time":{"start":1743000451551,"stop":1743000451552,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"949b65dc86cfeedc","name":".table","source":"949b65dc86cfeedc.csv","type":"text/csv","size":160}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"When I send a POST request to \"/api/fraud-detection/\"","time":{"start":1743000451552,"stop":1743000451570,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"Then the response status code should be 400","time":{"start":1743000451570,"stop":1743000451570,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"And the response body should contain \"message\" with value \"Invalid transaction data\"","time":{"start":1743000451571,"stop":1743000451571,"duration":0},"status":"failed","statusMessage":"AssertionError: Expected message 'Invalid transaction data', but got 'Transaction ID '555' already exists'\n","statusTrace":"  File \"/Users/apatni/error-402/Vembed/lib/python3.13/site-packages/behave/model.py\", line 1329, in run\n    match.run(runner.context)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^\n  File \"/Users/apatni/error-402/Vembed/lib/python3.13/site-packages/behave/matchers.py\", line 98, in run\n    self.func(context, *args, **kwargs)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"bdd/Fraud Detection/features/steps/Fraud Detection_steps.py\", line 39, in step_impl\n    assert response_json[\"message\"] == \"Invalid transaction data\", f\"Expected message 'Invalid transaction data', but got '{response_json['message']}'\"\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":4,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Fraud Detection API"},{"name":"framework","value":"behave"},{"name":"language","value":"cpython3"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"5f7c302a67d1cc5e.json","parameterValues":[]}