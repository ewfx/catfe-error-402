{"uid":"8d1c7d1747d915ca","name":"Create a new transaction with invalid data","fullName":"Fraud Detection API: Create a new transaction with invalid data","historyId":"4a6c2987f821c8fb81a6eaeaac00756c","time":{"start":1742998407320,"stop":1742998407320,"duration":0},"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@given(u'a transaction with')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Given a transaction with')\n\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@given(u'a transaction with')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Given a transaction with')\n\n","steps":[{"name":"Given a transaction with","time":{"start":1742998407320,"stop":1742998407320,"duration":0},"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@given(u'a transaction with')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Given a transaction with')\n\n","steps":[],"attachments":[{"uid":"40a93a1c95b7adee","name":".table","source":"40a93a1c95b7adee.csv","type":"text/csv","size":155}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"When I send a POST request to \"/api/fraud-detection/\"","time":{"start":1742998407320,"stop":1742998407320,"duration":0},"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@when(u'I send a POST request to \"/api/fraud-detection/\"')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: When I send a POST request to \"/api/fraud-detection/\"')\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"Then the response status code should be 400","time":{"start":1742998407320,"stop":1742998407320,"duration":0},"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'the response status code should be 400')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then the response status code should be 400')\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"And the response should contain \"error message\"","time":{"start":1742998407320,"stop":1742998407320,"duration":0},"status":"broken","statusMessage":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'the response should contain \"error message\"')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then the response should contain \"error message\"')\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":4,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Fraud Detection API"},{"name":"framework","value":"behave"},{"name":"language","value":"cpython3"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"8d1c7d1747d915ca.json","parameterValues":[]}